..
   :date: 2017-12-28
   :title: 達人プログラマーを読んでみた−34．テストしやすいコード2
   :category: Book
   :tags: Book

==========================================================
達人プログラマーを読んでみた−34．テストしやすいコード2
==========================================================

2017-12-28



「達人プログラマー」のテストしやすいコードを読みます。


.. raw:: html

   <a href="https://www.amazon.co.jp/%E6%96%B0%E8%A3%85%E7%89%88-%E9%81%94%E4%BA%BA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%BC-%E8%81%B7%E4%BA%BA%E3%81%8B%E3%82%89%E5%90%8D%E5%8C%A0%E3%81%B8%E3%81%AE%E9%81%93-Andrew-Hunt/dp/427421933X/ref=as_li_ss_il?ie=UTF8&qid=1514636620&sr=8-1&keywords=%E9%81%94%E4%BA%BA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%BC&linkCode=li2&tag=ironhotcom-22&linkId=75181be5d3d6e6fb07275ce348c31c07" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=427421933X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=ironhotcom-22" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=ironhotcom-22&l=li2&o=9&a=427421933X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

以下は、読んだ私の感想を書いているので本の内容そのものではありません。

34. テストしやすいコード
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

テスト装備を使用する
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

**テスト装備** ってなんでしょ？

「プロジェクトの標準としてテスト装備を開発しておくのが良いでしょう。」と書いてあるのでコーディング規約とか、チームの決まりとかなのかな？

Javaで各クラスにmainを書いておいてユニットテスト用のコードを用意しておくと便利みたいです。確かにファイル単位で動かせるようにして、そこにテストを書いておくのは良さそうです。

テスト用の名付けの決まりを決めておくのもテスト用関数一覧を作らないでいいので良さそうですね。

コラムに「作り込んだテストを捨てるような真似をしてはいけません」ってあります。書いたものを捨てるのは時間の無駄になるのでなにごとも計画をしてからやるのが良いですね。

テストウィンドウを構築する
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

テスト結果が表示されるような画面を作る話ですね。WEBフレームワークにはありますね。何事もルールが決まっていると見やすいです。

テストの文化
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

これが大きいと思います。前職までは単体レベルのテストはプログラマにおまかせで組織としての決まりがありませんでした。ユニットテストを書いている人もいれば、画面ショットをExcelに貼って終わりの人もいました。ユニットテストを書いても最後はExcelのチェック表を埋めるように言われるので、結局ユニットテストはあまり書いてませんでした。よくないですね。

自分を律する心が強いわけでもなく、すぐに流されてしまうので、健全な会社で働くのは健全なプログラムを書く第一歩ではないかと思っています。
